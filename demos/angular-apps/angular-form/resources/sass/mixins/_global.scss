// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// Foundation Variables
//

// Data attribute namespace
// styles get applied to [data-mysite-plugin], etc
$namespace: false !default;

// The default font-size is set to 100% of the browser style sheet (usually 16px)
// for compatibility with browser-based text zoom or user-set defaults.

// Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// If you want your base font-size to be different and not have it affect the grid breakpoints,
// set $rem-base to $base-font-size and make sure $base-font-size is a px value.
$base-font-size: 100% !default;

// $base-line-height is 24px while $base-font-size is 16px
$base-line-height: 1.5 !default;

@mixin color($color) {
	color: $color !important;
	* {
		color: $color !important;
	}
}

@mixin bg-color($color) {
	background-color: $color !important;
}

//
// Global Foundation Mixins
//

// @mixins
//
// We use this to control border radius.
// $radius - Default: $global-radius || 4px
@mixin radius($radius: $global-radius) {
	@if $radius {
		border-radius: $radius;
	}
}

// @mixins
//
// We use this to create equal side border radius on elements.
// $side - Options: left, right, top, bottom
@mixin side-radius($side, $radius: $global-radius) {
	@if ($side == left or $side == right) {
		-webkit-border-bottom-#{$side}-radius: $radius;
		-webkit-border-top-#{$side}-radius: $radius;
		border-bottom-#{$side}-radius: $radius;
		border-top-#{$side}-radius: $radius;
	} @else {
		-webkit-#{$side}-left-radius: $radius;
		-webkit-#{$side}-right-radius: $radius;
		border-#{$side}-left-radius: $radius;
		border-#{$side}-right-radius: $radius;
	}
}

// @mixins
//
// We can control whether or not we have inset shadows edges.
// $active - Default: true, Options: false
@mixin inset-shadow($active: true) {
	box-shadow: $shiny-edge-size $shiny-edge-color inset;

	@if $active {
		&:active {
			box-shadow: $shiny-edge-size $shiny-edge-active-color inset;
		}
	}
}

// @mixins
//
// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property: all, $speed: 300ms, $ease: ease-out) {
	transition: $property $speed $ease;
}

// @mixins
//
// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
// Android < 2.3, iOS < 4
	-moz-box-sizing: $type;
	box-sizing: $type;
// Chrome, IE 8+, Opera, Safari 5.1
}

// @mixins
//
// We use this to create isosceles triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
	border: inset $triangle-size;
	content: "";
	display: block;
	height: 0;
	width: 0;
	@if ($triangle-direction == top) {
		border-color: $triangle-color transparent transparent transparent;
		border-top-style: solid;
	}
	@if ($triangle-direction == bottom) {
		border-color: transparent transparent $triangle-color transparent;
		border-bottom-style: solid;
	}
	@if ($triangle-direction == left) {
		border-color: transparent transparent transparent $triangle-color;
		border-left-style: solid;
	}
	@if ($triangle-direction == right) {
		border-color: transparent $triangle-color transparent transparent;
		border-right-style: solid;
	}
}

// @mixins
//
// We use this to create the icon with three lines aka the hamburger icon, the menu-icon or the navicon
// $width - Width of hamburger icon in rem
// $left - If false, icon will be centered horizontally || explicitly set value in rem
// $top - If false, icon will be centered vertically || explicitly set value in rem
// $thickness - thickness of lines in hamburger icon, set value in px
// $gap - spacing between the lines in hamburger icon, set value in px
// $color - icon color
// $hover-color - icon color during hover
// $offcanvas - Set to true of @include in offcanvas
@mixin hamburger($width, $left, $top, $thickness, $gap, $color, $hover-color, $offcanvas) {
	span::after {
		content: "";
		display: block;
		height: 0;
		position: absolute;

		@if $offcanvas {
			@if $top {
				top: $top;
			} @else {
				top: 50%;
				margin-top: (-$width/2);
			}
			@if $left {
				left: $left;
			} @else {
				left: ($tabbar-menu-icon-width - $width)/2;
			}
		} @else {
			margin-top: -($width/2);
			top: 50%;
			#{$opposite-direction}: $topbar-link-padding;
		}

		box-shadow: 0 0 0 $thickness $color, 0 $gap + $thickness 0 $thickness $color, 0 (2 * $gap + 2*$thickness) 0 $thickness $color;
		width: $width;
	}
	span:hover:after {
		box-shadow: 0 0 0 $thickness $hover-color, 0 $gap + $thickness 0 $thickness $hover-color, 0 (2 * $gap + 2*$thickness) 0 $thickness $hover-color;
	}
}

// We use this to do clear floats
@mixin clearfix {
	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// @mixins
//
// We use this to add a glowing effect to block elements
// $selector - Used for selector state. Default: focus, Options: hover, active, visited
// $fade-time - Default: 300ms
// $glowing-effect-color - Default: fade-out($primary-color, .25)
@mixin block-glowing-effect($selector: focus, $fade-time: 300ms, $glowing-effect-color: fade-out($primary-color, .25)) {
	transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

	&:#{$selector} {
		border-color: $glowing-effect-color;
		box-shadow: 0 0 5px $glowing-effect-color;
	}
}

// @mixins
//
// We use this to translate elements in 2D
// $horizontal: Default: 0
// $vertical: Default: 0
@mixin translate2d($horizontal: 0, $vertical: 0) {
	transform: translate($horizontal, $vertical)
}

@mixin translate($x, $y) {
	-ms-transform: translate($x, $y); /* IE 9 */
	-webkit-transform: translate($x, $y); /* Chrome, Safari, Opera */
	transform: translate($x, $y);
}

@mixin translateX($x) {
	-ms-transform: translateX($x); /* IE 9 */
	-webkit-transform: translateX($x); /* Chrome, Safari, Opera */
	transform: translateX($x);
}

@mixin translateY($y) {
	-ms-transform: translateY($y); /* IE 9 */
	-webkit-transform: translateY($y); /* Chrome, Safari, Opera */
	transform: translateY($y);
}

// @mixins
//
// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
	clip: rect(1px, 1px, 1px, 1px);
	height: 1px;
	overflow: hidden;
	position: absolute !important;
	width: 1px;
}

// @mixins
//
// Turns off the element-invisible effect.
@mixin element-invisible-off {
	position: static !important;
	height: auto;
	width: auto;
	overflow: visible;
	clip: auto;
}

// Please do NOT use this folder for declaring Sass code that actually outputs CSS.

// Default Mixins to use at will!

// Take a px and convert to rem
@function calculateRem($values) {

	@if $supports-rem {
		$max: length($values);

		@if $max == 1 {
			@return convert-to-rem(nth($values, 1));
		}

		$remValues: ();
		@for $i from 1 through $max {
			$remValues: append($remValues, convert-to-rem(nth($values, $i)));
		}
		@return $remValues;
	} @else {
		@return $values;
	//just use value we were provided
	}

}

@mixin font-size($size) {
	font-size: calculateRem($size);
}

@mixin rem-size($attribute, $sizes) {
	#{$attribute}: calculateRem($sizes);
}

// Set all transitions across browsers
@mixin transition($property: all, $duration: .4s, $easing: ease-in-out) {
	-webkit-transition: $property, $duration, $easing;
	-moz-transition: $property, $duration, $easing;
	-ms-transition: $property, $duration, $easing;
	-o-transition: $property, $duration, $easing;
	transition: $property, $duration, $easing;
}

// Set drop shadows on elements
@mixin box-shadow($top, $left, $blur, $color, $inset: false, $spread: 0) {
	@if $inset {
		-webkit-box-shadow: inset $top $left $blur $spread $color;
		-o-box-shadow: inset $top $left $blur $spread $color;
		-moz-box-shadow: inset $top $left $blur $spread $color;
		box-shadow: inset $top $left $blur $spread $color;
	} @else {
		-webkit-box-shadow: $top $left $blur $spread $color;
		-o-box-shadow: $top $left $blur $spread $color;
		-moz-box-shadow: $top $left $blur $spread $color;
		box-shadow: $top $left $blur $spread $color;
	}
}

@mixin box-shadow-none() {
	-moz-box-shadow: none;
	-o-box-shadow: none;
	-webkit-box-shadow: none;
	box-shadow: none;
}

// Sets rounded corners on elements
@mixin rounded($radius: 0.3em) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
}

// Sets shadows on text if desired
@mixin text-shadow($top: 0, $left: 1px, $blur: 1px, $color: rgba(0, 0, 0, .3)) {
	text-shadow: $top $left $blur $color;
}

//cross browser opacity
@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie);
//IE8
}

//Add box-sizing across browser prefixes
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
// Android < 2.3, iOS < 4
	-moz-box-sizing: $type;
// Firefox < 29
	box-sizing: $type;
// Chrome, IE 8+, Opera, Safari 5.1
}

@mixin unlist {
	margin: 0;
	padding: 0;
	list-style: none;
}

//keeps the page from selecting text on doubleclick actions
@mixin no-select {
	-webkit-user-select: none; /* webkit (safari, chrome) browsers */
	-moz-user-select: none; /* mozilla browsers */
	-ms-user-select: none; /* IE10+ */
	user-select: none;
}

// Visible and focuasable on screen readers
@mixin sr-only {
	border: 0 none;
	clip: rect(0px, 0px, 0px, 0px);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

@mixin sr-only-focusable {
	&:active, &:focus {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto;
	}
}

@mixin constrain-width {
	max-width: $row-width;
	margin: 0 auto;
}

// style placeholder (just send in content rules you want to style)
// @include placeholder{font-style:italic; color:#ccc; font-weight:300;}
@mixin placeholder {
	::-webkit-input-placeholder {
		@content;
	}
	:-moz-placeholder {
		@content;
	}
	::-moz-placeholder {
		@content;
	}
	:-ms-input-placeholder {
		@content;
	}
}

@mixin media($size) {
// If media queries are supported
	@if $supports-mq {
		$query: getMediaQuery($size);
		@media #{$query} {
			@content;
		}
	} @else {
	// check if we should apply these rules...
		@if $size == "small-up" or $size == "medium-up" or $size == "large-up" or $size == "large-only" {
		// ...output the content the user gave us.
			@content;
		}
	}
}

// Helper to align inline icons to midline of text
@mixin align-icon-middle($margin-top: -3px) {
	display: inline-block;
	vertical-align: middle;
	@include rem-size(margin-top, $margin-top);
}

// Mixin presets //
@mixin nav-color($arg1, $arg2) {
	background-color: $arg1;
	color: $arg2;
}

@mixin button-color($arg1, $arg2) {
	background-color: $arg1;
	color: $arg2;
}

@mixin tile-color($arg1, $arg2) {
	background-color: $arg1;
	color: $arg2;
}

@mixin title($arg1, $arg2) {
	font-family: $arg1;
	font-size: $arg2;
}

@mixin sprite-position($width, $height, $index, $spriteSpacing: 5) {
	@if $index == 0 {
		background-position: 0 0;
	}
	@if $index > 0 {
		background-position: -(($index * $spriteSpacing) + ($width * $index)) 0;
	}
	height: $height;
	width: $width;
}

@mixin sprite($imgUrl, $imgUrl2x, $imgWidth, $imgHeight) {
	background: transparent;
	background-image: url($imgUrl);
	background-repeat: no-repeat;
	display: inline-block;
	text-indent: 110%;
	white-space: nowrap;
	overflow: hidden;
	vertical-align: middle;
	margin-top: -.2em;

	@media (-webkit-min-device-pixel-ratio: 1.3), (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 13 / 10), (min-device-pixel-ratio: 1.3), (min-resolution: 120dpi) {
		background-image: url($imgUrl2x);
		-webkit-background-size: $imgWidth $imgHeight;
		-moz-background-size: $imgWidth $imgHeight;
		-o-background-size: $imgWidth $imgHeight;
		background-size: $imgWidth $imgHeight;
	}
}